#include "DualVNH5019MotorShield.h"
#include "NewPing.h"

#define V_MAX 500
#define V_STEP 25
#define CMD_RATE 40
#define FEEDBACK_RATE 10
#define MSG_SIZE 10
#define POLY 0x8408
#define CMD_MSG_TIMEOUT_DURATION 500
#define SONIC_NUM 4
#define MAX_DISTANCE 255
#define FORWARD_SPEED 200      // Adjust as needed
#define TURN_SPEED 150         // Adjust as needed
#define TURN_DURATION 1000    // Adjust as needed
#define DISTANCE_THRESHOLD 20 // Adjust as needed

NewPing sonics_[SONIC_NUM] = {NewPing( 3,  3, MAX_DISTANCE),
                              NewPing(11, 11, MAX_DISTANCE),
                              NewPing(A2, A2, MAX_DISTANCE),
                              NewPing(A3, A3, MAX_DISTANCE)                          
                             };

DualVNH5019MotorShield md;

unsigned long next_cmd_time_;
unsigned long next_feedback_time_;
unsigned long prev_cmd_msg_time_;
int m1_cmd_ = 0;
int m2_cmd_ = 0;
int target_v1_ = 0;
int target_v2_ = 0;
char rx_buffer_[MSG_SIZE];
int next_write_ = 0;
bool msg_complete_ = false;

void stopIfFault() {
  if (md.getM1Fault()) {
    Serial.println("M1 fault");
    while (1);
  }
  if (md.getM2Fault()) {
    Serial.println("M2 fault");
    while (1);
  }
}

int calculateCommand(int current_speed, int target_speed) {
  int error;
  int command;

  // Make sure target is within legal range
  if (abs(target_speed) > V_MAX) {
    target_speed = V_MAX * (target_speed / abs(target_speed));
  }

  // Calculate error
  error = target_speed - current_speed;

  if (abs(error) < V_STEP) {
    command = target_speed;
  }
  else {
    command = current_speed + V_STEP * (error / abs(error));
  }

  return command;
}

unsigned short crc16(char *data_p, unsigned short length) {
  unsigned char i;
  unsigned int data;
  unsigned int crc = 0x0000;

  if (length == 0)
    return (~crc);

  do {
    for (i = 0, data = (unsigned int)0xff & *data_p++;
      i < 8;
      i++, data >>= 1) {
      if ((crc & 0x0001) ^ (data & 0x0001))
        crc = (crc >> 1) ^ POLY;
      else
        crc >>= 1;
    }
  } while (--length);

  return (crc);
}

void setup() {
  Serial.begin(115200);
  md.init();
  next_cmd_time_ = millis();
  next_feedback_time_ = millis();
  prev_cmd_msg_time_ = millis() + CMD_MSG_TIMEOUT_DURATION;
}

void loop() {
  unsigned long current_time = millis();

  if (current_time > next_feedback_time_) {
    int sonic_1 = sonics_[0].ping_cm();
    // ... (get distances for other sensors)

    if (sonic_1 < DISTANCE_THRESHOLD) {
      md.setM1Speed(0);
      md.setM2Speed(0);

      md.setM1Speed(TURN_SPEED);
      md.setM2Speed(-TURN_SPEED);
      delay(TURN_DURATION);
      md.setM1Speed(0);
      md.setM2Speed(0);

      target_v1_ = FORWARD_SPEED;
      target_v2_ = FORWARD_SPEED;
      next_feedback_time_ = current_time + (1000 / FEEDBACK_RATE);
    }
    else {
      m1_cmd_ = calculateCommand(m1_cmd_, target_v1_);
      m2_cmd_ = calculateCommand(m2_cmd_, target_v2_);
      next_cmd_time_ += 1000 / CMD_RATE;
      md.setM1Speed(m1_cmd_);
      md.setM2Speed(m2_cmd_);
      stopIfFault();
    }
  }
}
